from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import json
import math
import os
import requests
from functools import lru_cache
import gspread
from google.oauth2.service_account import Credentials

# –°–ø–∏—Å–æ–∫ API –¥–æ—Å—Ç—É–ø–æ–≤
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]

GOOGLE_SHEET_ID = "1TECrfLG4qGJDo3l9MQava7SMJpPKnhK3RId8wcnEgm8"  # —Ç–≤–æ–π ID —Ç–∞–±–ª–∏—Ü—ã
SHEET_NAME = "Factories"  # –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞


app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—á—Ç–æ–±—ã HTML –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ API)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É static –¥–ª—è HTML —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü—É—Ç–∏ –∫ JSON —Ñ–∞–π–ª–∞–º
FACTORIES_FILE = "factories.json"
VEHICLES_FILE = "vehicles.json"

import threading, time

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Google Sheets ---
def load_factories_from_google() -> list[dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∏—Ö –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –∏–∑ Google Sheets.
    –û–∂–∏–¥–∞–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ–≤–∞–∂–µ–Ω): –Ω–∞–∑–≤–∞–Ω–∏–µ | –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã | –∫–∞—Ç–µ–≥–æ—Ä–∏—è | –ø–æ–¥—Ç–∏–ø | –≤–µ—Å | —Ü–µ–Ω–∞
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑ ‚Äì –Ω–∏–∂–µ –±–µ—Ä—ë–º –µ—ë –∫–∞–∫ ¬´—Ç–µ–∫—É—â—É—é¬ª.
    """
    try:
        import json, os
        creds = Credentials.from_service_account_info(json.loads(os.getenv("GOOGLE_CREDENTIALS")), scopes=SCOPES)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(GOOGLE_SHEET_ID).worksheet(SHEET_NAME)
        rows = sheet.get_all_records()  # —Å–ø–∏—Å–æ–∫ dict –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º 1-–π —Å—Ç—Ä–æ–∫–∏

        def cell(row: dict, *names: str):
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ª—é–±–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
            for n in names:
                if n in row: 
                    return row[n]
                # –ø—Ä–æ–±—É–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞/–ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                for k in row.keys():
                    if k.strip().lower() == n.strip().lower():
                        return row[k]
            return None

        def to_float(x):
            if x is None or x == "":
                return 0.0
            return float(str(x).replace(",", ".").strip())

        factories_map: dict[str, dict] = {}

        current_factory: str | None = None
        current_coords: str | None = None
        current_category: str | None = None

        for row in rows:
            # –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
            name      = cell(row, "–Ω–∞–∑–≤–∞–Ω–∏–µ")
            coords    = cell(row, "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            category  = cell(row, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
            subtype   = cell(row, "–ø–æ–¥—Ç–∏–ø")
            weight    = cell(row, "–≤–µ—Å")
            price     = cell(row, "—Ü–µ–Ω–∞", "–¶–µ–Ω–∞")

            # –µ—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã/–∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∂–µ
            if isinstance(name, str) and name.strip():
                current_factory = name.strip()
            if isinstance(coords, str) and coords.strip():
                current_coords = coords.strip()
            if isinstance(category, str) and category.strip():
                current_category = category.strip()

            # –µ—Å–ª–∏ —ç—Ç–æ ¬´–∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è¬ª —Å—Ç—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è) ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ
            if not subtype or not current_factory or not current_category:
                continue

            # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –∑–∞–≤–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–∞–¥–∞–Ω–∏–∏
            if current_factory not in factories_map:
                try:
                    lat_str, lon_str = (current_coords or "0,0").split(",")
                    lat, lon = float(lat_str), float(lon_str)
                except Exception:
                    lat, lon = 0.0, 0.0

                factories_map[current_factory] = {
                    "name": current_factory,
                    "lat": lat,
                    "lon": lon,
                    "products": []
                }

            factories_map[current_factory]["products"].append({
                "category": current_category,
                "subtype": str(subtype).strip(),
                "weight_ton": to_float(weight),
                "price": to_float(price),
            })

        return list(factories_map.values())

    except Exception as e:
        import traceback
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã:")
        traceback.print_exc()
        return []


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
factories = load_factories_from_google()
if not factories:
    # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ ‚Äî —á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à, –µ—Å–ª–∏ –≥—É–≥–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    def load_json(filename):
        if not os.path.exists(filename):
            return []
        try:
            with open(filename, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            return []
    factories = load_json(FACTORIES_FILE)

# --- –§–æ–Ω–æ–≤–æ–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
def refresh_factories_periodically():
    global factories
    while True:
        try:
            new_factories = load_factories_from_google()
            if new_factories:
                factories = new_factories
                # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî –∫—ç—à–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                try:
                    with open(FACTORIES_FILE, "w", encoding="utf-8") as f:
                        json.dump(factories, f, ensure_ascii=False, indent=2)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à factories.json: {e}")
                print("‚úÖ –ó–∞–≤–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ Google Sheets")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ—Ç–æ–∫): {e}")
        time.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

threading.Thread(target=refresh_factories_periodically, daemon=True).start()

@app.post("/admin/reload")
async def admin_reload():
    
    """
    üîÑ –†—É—á–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤ –∏ —Å—Ç–∞—Ç—É—Å.
    """
    global factories
    try:
        new_factories = load_factories_from_google()
        if not new_factories:
            return JSONResponse(status_code=500, content={"detail": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"})

        factories = new_factories
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (—á—Ç–æ–±—ã API –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å—Ç–∞—Ä—Ç–µ)
        with open(FACTORIES_FILE, "w", encoding="utf-8") as f:
            json.dump(factories, f, ensure_ascii=False, indent=2)

        print("‚úÖ –ó–∞–≤–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /admin/reload")
        return {"status": "ok", "count": len(factories), "message": "–ó–∞–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}

    except Exception as e:
        import traceback
        traceback.print_exc()
        return JSONResponse(status_code=500, content={"detail": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}"})

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
def load_json(filename):
    if not os.path.exists(filename):
        return []
    with open(filename, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return []


def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
factories = load_factories_from_google()
vehicles = load_json(VEHICLES_FILE)


# ===== –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö =====
class Product(BaseModel):
    category: str
    subtype: str
    weight_ton: float
    price: float


class Factory(BaseModel):
    name: str
    lat: float
    lon: float


class Vehicle(BaseModel):
    name: str
    capacity_ton: float

# ===== API: –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞–º–∏ =====
@app.get("/api/factories")
async def get_factories():
    return load_json(FACTORIES_FILE)


@app.post("/api/factories")
async def add_factory(factory: Factory):
    factories = load_factories_from_google()
    if any(f["name"] == factory.name for f in factories):
        return JSONResponse(status_code=400, content={"detail": "–¢–∞–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
    factories.append(factory.dict() | {"products": []})
    save_json(FACTORIES_FILE, factories)
    return {"message": f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ {factory.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ"}


@app.delete("/api/factories/{factory_name}")
async def delete_factory(factory_name: str):
    factories = load_json(FACTORIES_FILE)
    updated = [f for f in factories if f["name"] != factory_name]
    if len(updated) == len(factories):
        return JSONResponse(status_code=404, content={"detail": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
    save_json(FACTORIES_FILE, updated)
    return {"message": f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ {factory_name} —É–¥–∞–ª–µ–Ω–æ"}


# ======== –ú–ê–®–ò–ù–´ (vehicles) ========

@app.get("/api/vehicles")
def get_vehicles():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—à–∏–Ω"""
    return load_json(VEHICLES_FILE)

@app.get("/api/categories")
def get_categories():
    factories = load_json(FACTORIES_FILE)
    categories = {}

    for f in factories:
        for p in f.get("products", []):
            cat = p["category"]
            sub = p["subtype"]
            if cat not in categories:
                categories[cat] = set()
            categories[cat].add(sub)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏
    result = {cat: sorted(list(subs)) for cat, subs in categories.items()}
    return result


@app.post("/api/vehicles")
async def add_vehicle(request: Request):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É —Å —Ç–µ–≥–æ–º"""
    data = await request.json()
    name = data.get("name")
    capacity = data.get("capacity_ton") or data.get("capacity")
    tag = data.get("tag")  # –º–æ–∂–µ—Ç –±—ã—Ç—å "manipulator" –∏–ª–∏ "long_haul"

    if not name or not capacity:
        return JSONResponse(status_code=400, content={"detail": "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å"})
    if tag not in ["manipulator", "long_haul"]:
        return JSONResponse(status_code=400, content={"detail": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–≥. –î–æ–ø—É—Å—Ç–∏–º–æ: manipulator / long_haul"})

    vehicles = load_json(VEHICLES_FILE)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if any(v["name"].lower() == name.lower() for v in vehicles):
        return JSONResponse(status_code=400, content={"detail": "–¢–∞–∫–∞—è –º–∞—à–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})

    vehicles.append({
        "name": name,
        "capacity_ton": float(capacity),
        "tag": tag
    })
    save_json(VEHICLES_FILE, vehicles)

    return {"message": f"–ú–∞—à–∏–Ω–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Ç–µ–≥–æ–º '{tag}'"}


@app.delete("/api/vehicles/{name}")
def delete_vehicle(name: str):
    """–£–¥–∞–ª—è–µ—Ç –º–∞—à–∏–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    vehicles = load_json(VEHICLES_FILE)
    new_list = [v for v in vehicles if v["name"].lower() != name.lower()]

    if len(new_list) == len(vehicles):
        return JSONResponse(status_code=404, content={"detail": "–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

    save_json(VEHICLES_FILE, new_list)
    return {"message": f"–ú–∞—à–∏–Ω–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞."}

# ===== API: –¢–æ–≤–∞—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ =====
@app.post("/api/factories/{factory_name}/product")
async def add_product(factory_name: str, product: Product):
    factories = load_json(FACTORIES_FILE)
    for f in factories:
        if f["name"] == factory_name:
            f["products"].append(product.dict())
            save_json(FACTORIES_FILE, factories)
            return {"message": f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫ {factory_name}"}
    return JSONResponse(status_code=404, content={"detail": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})


@app.delete("/api/factories/{factory_name}/product/{subtype}")
async def delete_product(factory_name: str, subtype: str):
    factories = load_json(FACTORIES_FILE)
    for f in factories:
        if f["name"] == factory_name:
            f["products"] = [p for p in f.get("products", []) if p["subtype"] != subtype]
            save_json(FACTORIES_FILE, factories)
            return {"message": f"–¢–æ–≤–∞—Ä {subtype} —É–¥–∞–ª—ë–Ω –∏–∑ {factory_name}"}
    return JSONResponse(status_code=404, content={"detail": "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"})
# ===== –ì–µ–æ–º–µ—Ç—Ä–∏—è: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (Haversine) =====
import math
import requests

# üîë –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API-–∫–ª—é—á OpenRouteService
ORS_API_KEY = "eyJvcmciOiI1YjNjZTM1OTc4NTExMTAwMDFjZjYyNDgiLCJpZCI6IjZmNDMwM2U5NWY1NDQ1N2ZiMmZkZGY5YmUyNWFkZDAyIiwiaCI6Im11cm11cjY0In0="

from functools import lru_cache

@lru_cache(maxsize=1000)
def get_cached_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏."""
    return calculate_road_distance(lat1, lon1, lat2, lon2)


def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """
    –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–π (Haversine)
    """
    R = 6371.0
    p1, p2 = math.radians(lat1), math.radians(lat2)
    dphi = math.radians(lat2 - lat1)
    dlmb = math.radians(lon2 - lon1)
    a = math.sin(dphi / 2) ** 2 + math.cos(p1) * math.cos(p2) * math.sin(dlmb / 2) ** 2
    return 2 * R * math.atan2(math.sqrt(a), math.sqrt(1 - a))


def calculate_road_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –¥–æ—Ä–æ–≥–∞–º (–≤ –∫–º)
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouteService.
    –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Haversine-–¥–∏—Å—Ç–∞–Ω—Ü–∏—é.
    """
    try:
        url = "https://api.openrouteservice.org/v2/directions/driving-car"
        headers = {
            "Authorization": ORS_API_KEY,
            "Content-Type": "application/json",
        }
        body = {
            "coordinates": [[lon1, lat1], [lon2, lat2]]
        }

        response = requests.post(url, json=body, headers=headers, timeout=10)
        print("üîç –û—Ç–≤–µ—Ç ORS:", response.text)  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if response.status_code == 200:
            data = response.json()
            # üîß –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            if "routes" in data and len(data["routes"]) > 0:
                dist_m = data["routes"][0]["segments"][0]["distance"]
                return round(dist_m / 1000, 2)
            else:
                print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ ORS")
                return calculate_distance(lat1, lon1, lat2, lon2)
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenRouteService:", response.text)
            return calculate_distance(lat1, lon1, lat2, lon2)
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ORS:", e)
        return calculate_distance(lat1, lon1, lat2, lon2)


def get_delivery_cost(transport_type: str, distance_km: float, weight_ton: float = 0) -> tuple[float, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞_1_—Ä–µ–π—Å, –æ–ø–∏—Å–∞–Ω–∏–µ_—Ç–∞—Ä–∏—Ñ–∞)
    transport_type: "manipulator" | "long_haul"
    """
    # === –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä ===
    if transport_type == "manipulator":
        if distance_km <= 30:
            return 16000, "0‚Äì30 –∫–º / –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä"
        elif distance_km <= 60:
            return 18000, "30‚Äì60 –∫–º / –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä"
        elif distance_km <= 80:
            return 20000, "60‚Äì80 –∫–º / –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä"
        elif distance_km <= 100:
            return 22000, "80‚Äì100 –∫–º / –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä"
        elif distance_km <= 120:
            return 24000, "100‚Äì120 –∫–º / –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä"
        else:
            cost = 24000 + (distance_km - 120) * 200
            return cost, f"{distance_km:.0f} –∫–º / –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä (+200‚ÇΩ/–∫–º)"

    # === –î–ª–∏–Ω–Ω–æ–º–µ—Ä ===
    if transport_type == "long_haul":
        if weight_ton < 20:
            if distance_km <= 30:
                return 19000, "0‚Äì30 –∫–º / ‚â§20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 60:
                return 22000, "30‚Äì60 –∫–º / ‚â§20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 80:
                return 24000, "60‚Äì80 –∫–º / ‚â§20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 100:
                return 25000, "80‚Äì100 –∫–º / ‚â§20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 120:
                return 28000, "100‚Äì120 –∫–º / ‚â§20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            else:
                cost = 28000 + (distance_km - 120) * 200
                return cost, f"{distance_km:.0f} –∫–º / ‚â§20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä (+200‚ÇΩ/–∫–º)"
        else:
            if distance_km <= 30:
                return 23000, "0‚Äì30 –∫–º / >20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 60:
                return 26000, "30‚Äì60 –∫–º / >20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 80:
                return 28000, "60‚Äì80 –∫–º / >20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 100:
                return 30000, "80‚Äì100 –∫–º / >20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            elif distance_km <= 120:
                return 33000, "100‚Äì120 –∫–º / >20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä"
            else:
                cost = 33000 + (distance_km - 120) * 230
                return cost, f"{distance_km:.0f} –∫–º / >20—Ç / –î–ª–∏–Ω–Ω–æ–º–µ—Ä (+230‚ÇΩ/–∫–º)"

    # fallback (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à—ë–ª –¥—Ä—É–≥–æ–π —Ç–µ–≥)
    base = 18000 + distance_km * 150
    return base, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç"


# ===== –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä =====
class QuoteItem(BaseModel):
    category: str
    subtype: str
    quantity: int


class QuoteRequest(BaseModel):
    upload_lat: float
    upload_lon: float
    transport_type: str  # "auto" | "manipulator" | "truck"
    forbidden_types: list[str] = []
    items: list[QuoteItem]


@app.post("/quote")
async def quote(req: QuoteRequest):
    factories = load_json(FACTORIES_FILE)
    vehicles = load_json(VEHICLES_FILE)
    if not factories:
        return JSONResponse(status_code=400, content={"detail": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞—Ö"})
    if not vehicles:
        return JSONResponse(status_code=400, content={"detail": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—à–∏–Ω–∞—Ö"})

    # ===== 1. –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –≤–µ—Å =====
    total_weight = 0.0
    for item in req.items:
        for f in factories:
            for p in f.get("products", []):
                if p["category"] == item.category and p["subtype"] == item.subtype:
                    total_weight += p["weight_ton"] * item.quantity


    # ===== –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç—å –ø–æ —Ç–µ–≥—É =====
    def type_capacity(t: str) -> float:
        caps = [v.get("capacity_ton", v.get("capacity", 0)) for v in vehicles if v.get("tag") == t]
        if not caps:
            return max(v.get("capacity_ton", v.get("capacity", 0)) for v in vehicles)
        return max(caps)

    # ===== 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ =====
    if req.transport_type == "auto":
        possible_types = sorted({v.get("tag") for v in vehicles if v.get("tag") in ("manipulator", "long_haul")})
        if not possible_types:
            largest = max(vehicles, key=lambda v: v.get("capacity_ton", 0))
            transport_type = largest.get("tag", "long_haul")
        else:
            best_type, best_total_delivery = None, float("inf")
            # –≤–æ–∑—å–º—ë–º –ø–µ—Ä–≤—É—é —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –ø—Ä–∏–∫–∏–¥–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            first_factory = factories[0]
            sample_dist = get_cached_distance(first_factory["lat"], first_factory["lon"],
                                              req.upload_lat, req.upload_lon)
            for t in possible_types:
                cap = type_capacity(t)
                if cap <= 0:
                    continue
                cost_per_trip, _ = get_delivery_cost(t, sample_dist, total_weight)
                trips = math.ceil(total_weight / cap)
                total_delivery = cost_per_trip * trips
                if total_delivery < best_total_delivery:
                    best_total_delivery = total_delivery
                    best_type = t
            transport_type = best_type or "manipulator"
    else:
        transport_type = req.transport_type

    # ===== 4. –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∑–∞–≤–æ–¥ –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—Å—Ç–æ–∏–º–æ—Å—Ç—å 1 —Ä–µ–π—Å–∞) =====
    shipment_details = []
    for item in req.items:
        best = None  # (total, factory, prod, dist, mat_cost, del_cost, tariff)
        for f in factories:
            for p in f.get("products", []):
                if p["category"] == item.category and p["subtype"] == item.subtype:
                    dist = get_cached_distance(f["lat"], f["lon"], req.upload_lat, req.upload_lon)
                    mat_cost = p["price"] * item.quantity
                    weight_here = p["weight_ton"] * item.quantity
                    del_cost_per_trip, tariff_info = get_delivery_cost(transport_type, dist, weight_here)
                    total = mat_cost + del_cost_per_trip
                    if best is None or total < best[0]:
                        best = (total, f, p, dist, mat_cost, del_cost_per_trip, tariff_info)
        if best:
            total, f, p, dist, mat_cost, del_cost_per_trip, tariff_info = best
            shipment_details.append({
                "—Ç–æ–≤–∞—Ä": f"{p['category']} ({p['subtype']})",
                "–∑–∞–≤–æ–¥": f["name"],
                "–º–∞—à–∏–Ω–∞": transport_type,
                "–∫–æ–ª-–≤–æ": item.quantity,
                "–≤–µ—Å_—Ç–æ–Ω–Ω": round(p["weight_ton"] * item.quantity, 2),
                "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–∫–º": round(dist, 2),
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å_–º–∞—Ç–µ—Ä–∏–∞–ª–∞": mat_cost,
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å_–¥–æ—Å—Ç–∞–≤–∫–∏": round(del_cost_per_trip, 2),  # –ø–æ–∫–∞ –∑–∞ 1 —Ä–µ–π—Å
                "—Ç–∞—Ä–∏—Ñ": tariff_info,
                "–∏—Ç–æ–≥–æ": round(total, 2),
            })

    # ===== 5. –†–µ–π—Å—ã –ø–æ –∑–∞–≤–æ–¥–∞–º (–ø–æ –≥—Ä—É–∑–æ–ø–æ–¥—ä—ë–º–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞) =====
    cap = type_capacity(transport_type)
    factory_ship = {}
    for d in shipment_details:
        f = d["–∑–∞–≤–æ–¥"]
        factory_ship.setdefault(f, {"weight": 0.0, "trips": 0})
        factory_ship[f]["weight"] += d["–≤–µ—Å_—Ç–æ–Ω–Ω"]

    total_trips = 0
    for f, info in factory_ship.items():
        trips = math.ceil(info["weight"] / cap) if cap > 0 else 0
        info["trips"] = trips
        total_trips += trips

    # ===== 6. –ü–µ—Ä–µ—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∏—Ç–æ–≥–æ–≤ —Å —É—á—ë—Ç–æ–º —á–∏—Å–ª–∞ —Ä–µ–π—Å–æ–≤ =====
    for d in shipment_details:
        trips = factory_ship.get(d["–∑–∞–≤–æ–¥"], {}).get("trips", 1)
        d["—Å—Ç–æ–∏–º–æ—Å—Ç—å_–¥–æ—Å—Ç–∞–≤–∫–∏"] = round(d["—Å—Ç–æ–∏–º–æ—Å—Ç—å_–¥–æ—Å—Ç–∞–≤–∫–∏"] * trips, 2)
        d["–∏—Ç–æ–≥–æ"] = round(d["—Å—Ç–æ–∏–º–æ—Å—Ç—å_–º–∞—Ç–µ—Ä–∏–∞–ª–∞"] + d["—Å—Ç–æ–∏–º–æ—Å—Ç—å_–¥–æ—Å—Ç–∞–≤–∫–∏"], 2)

    total_material_cost = sum(d["—Å—Ç–æ–∏–º–æ—Å—Ç—å_–º–∞—Ç–µ—Ä–∏–∞–ª–∞"] for d in shipment_details)
    total_delivery_cost = sum(d["—Å—Ç–æ–∏–º–æ—Å—Ç—å_–¥–æ—Å—Ç–∞–≤–∫–∏"] for d in shipment_details)

    return {
        "–¥–µ—Ç–∞–ª–∏": shipment_details,
        "–æ–±—â–∏–π_–≤–µ—Å": round(total_weight, 2),
        "—Ç–∏–ø_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞": transport_type,
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ä–µ–π—Å–æ–≤": total_trips,
        "–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_–º–∞—Ç–µ—Ä–∏–∞–ª–∞": round(total_material_cost, 2),
        "–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_–¥–æ—Å—Ç–∞–≤–∫–∏": round(total_delivery_cost, 2),
        "–∏—Ç–æ–≥–æ": round(total_material_cost + total_delivery_cost, 2),
        "factories_info": {
            f: {"–≤–µ—Å_—Ç–æ–Ω–Ω": round(info["weight"], 2), "—Ä–µ–π—Å—ã": info["trips"]}
            for f, info in factory_ship.items()
        }
    }


# –ö–æ—Ä–µ–Ω—å
@app.get("/")
def root():
    return {"message": "–°–µ—Ä–≤–∏—Å —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!"}


# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)

from fastapi.staticfiles import StaticFiles

from fastapi.responses import FileResponse

@app.get("/")
def index():
    return FileResponse("static/index.html")

@app.get("/admin")
def admin_page():
    return FileResponse("static/admin.html")

@app.get("/calculator")
def calculator_page():
    return FileResponse("static/calculator.html")

